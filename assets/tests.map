{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","allthemats/tests/adapters/application.jshint.lint-test.js","allthemats/tests/app.jshint.lint-test.js","allthemats/tests/components/email-input.jshint.lint-test.js","allthemats/tests/components/password-input.jshint.lint-test.js","allthemats/tests/components/row-header.jshint.lint-test.js","allthemats/tests/components/sign-in-form.jshint.lint-test.js","allthemats/tests/helpers/destroy-app.js","allthemats/tests/helpers/destroy-app.jshint.lint-test.js","allthemats/tests/helpers/flash-message.js","allthemats/tests/helpers/flash-message.jshint.lint-test.js","allthemats/tests/helpers/module-for-acceptance.js","allthemats/tests/helpers/module-for-acceptance.jshint.lint-test.js","allthemats/tests/helpers/resolver.js","allthemats/tests/helpers/resolver.jshint.lint-test.js","allthemats/tests/helpers/start-app.js","allthemats/tests/helpers/start-app.jshint.lint-test.js","allthemats/tests/integration/components/email-input-test.js","allthemats/tests/integration/components/email-input-test.jshint.lint-test.js","allthemats/tests/integration/components/password-input-test.js","allthemats/tests/integration/components/password-input-test.jshint.lint-test.js","allthemats/tests/integration/components/row-header-test.js","allthemats/tests/integration/components/row-header-test.jshint.lint-test.js","allthemats/tests/integration/components/sign-in-form-test.js","allthemats/tests/integration/components/sign-in-form-test.jshint.lint-test.js","allthemats/tests/resolver.jshint.lint-test.js","allthemats/tests/router.jshint.lint-test.js","allthemats/tests/routes/application.jshint.lint-test.js","allthemats/tests/routes/sign-in.jshint.lint-test.js","allthemats/tests/serializers/application.jshint.lint-test.js","allthemats/tests/services/ajax.jshint.lint-test.js","allthemats/tests/services/auth.jshint.lint-test.js","allthemats/tests/storages/auth.jshint.lint-test.js","allthemats/tests/test-helper.js","allthemats/tests/test-helper.jshint.lint-test.js","allthemats/tests/unit/adapters/application-test.js","allthemats/tests/unit/adapters/application-test.jshint.lint-test.js","allthemats/tests/unit/routes/application-test.js","allthemats/tests/unit/routes/application-test.jshint.lint-test.js","allthemats/tests/unit/routes/sign-in-test.js","allthemats/tests/unit/routes/sign-in-test.jshint.lint-test.js","allthemats/tests/unit/serializers/application-test.js","allthemats/tests/unit/serializers/application-test.jshint.lint-test.js","allthemats/tests/unit/services/ajax-test.js","allthemats/tests/unit/services/ajax-test.jshint.lint-test.js","allthemats/tests/unit/services/auth-test.js","allthemats/tests/unit/services/auth-test.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('allthemats/tests/adapters/application.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass jshint.\\nadapters/application.js: line 1, col 54, Missing semicolon.\\nadapters/application.js: line 2, col 48, Missing semicolon.\\nadapters/application.js: line 11, col 23, Missing semicolon.\\nadapters/application.js: line 12, col 55, Missing semicolon.\\nadapters/application.js: line 14, col 55, Missing semicolon.\\nadapters/application.js: line 17, col 21, Missing semicolon.\\nadapters/application.js: line 20, col 3, Missing semicolon.\\nadapters/application.js: line 7, col 9, \\'Ember\\' is not defined.\\nadapters/application.js: line 9, col 12, \\'Ember\\' is not defined.\\n\\n9 errors');\n  });\n});","define('allthemats/tests/app.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('allthemats/tests/components/email-input.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/email-input.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/email-input.js should pass jshint.\\ncomponents/email-input.js: line 1, col 26, Missing semicolon.\\ncomponents/email-input.js: line 6, col 3, Missing semicolon.\\n\\n2 errors');\n  });\n});","define('allthemats/tests/components/password-input.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/password-input.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/password-input.js should pass jshint.\\ncomponents/password-input.js: line 1, col 26, Missing semicolon.\\ncomponents/password-input.js: line 6, col 3, Missing semicolon.\\n\\n2 errors');\n  });\n});","define('allthemats/tests/components/row-header.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/row-header.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/row-header.js should pass jshint.\\ncomponents/row-header.js: line 1, col 26, Missing semicolon.\\ncomponents/row-header.js: line 4, col 3, Missing semicolon.\\n\\n2 errors');\n  });\n});","define('allthemats/tests/components/sign-in-form.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | components/sign-in-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/sign-in-form.js should pass jshint.\\ncomponents/sign-in-form.js: line 1, col 26, Missing semicolon.\\ncomponents/sign-in-form.js: line 9, col 57, Missing semicolon.\\ncomponents/sign-in-form.js: line 13, col 34, Missing semicolon.\\ncomponents/sign-in-form.js: line 16, col 3, Missing semicolon.\\n\\n4 errors');\n  });\n});","define('allthemats/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('allthemats/tests/helpers/destroy-app.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('allthemats/tests/helpers/flash-message', ['exports', 'ember-cli-flash/flash/object'], function (exports, _emberCliFlashFlashObject) {\n\n  _emberCliFlashFlashObject['default'].reopen({ init: function init() {} });\n});","define('allthemats/tests/helpers/flash-message.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/flash-message.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/flash-message.js should pass jshint.');\n  });\n});","define('allthemats/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'allthemats/tests/helpers/start-app', 'allthemats/tests/helpers/destroy-app'], function (exports, _qunit, _allthematsTestsHelpersStartApp, _allthematsTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _allthematsTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _allthematsTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('allthemats/tests/helpers/module-for-acceptance.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('allthemats/tests/helpers/resolver', ['exports', 'allthemats/resolver', 'allthemats/config/environment'], function (exports, _allthematsResolver, _allthematsConfigEnvironment) {\n\n  var resolver = _allthematsResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _allthematsConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _allthematsConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('allthemats/tests/helpers/resolver.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('allthemats/tests/helpers/start-app', ['exports', 'ember', 'allthemats/app', 'allthemats/config/environment'], function (exports, _ember, _allthematsApp, _allthematsConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _allthematsConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _allthematsApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('allthemats/tests/helpers/start-app.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('allthemats/tests/integration/components/email-input-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('email-input', 'Integration | Component | email input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '6ZlF6XfM',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"email-input\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'YM0cFao3',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"email-input\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('allthemats/tests/integration/components/email-input-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/email-input-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/email-input-test.js should pass jshint.');\n  });\n});","define('allthemats/tests/integration/components/password-input-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('password-input', 'Integration | Component | password input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'qKa4/eNs',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"password-input\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'zLQB4Ctb',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"password-input\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('allthemats/tests/integration/components/password-input-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/password-input-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/password-input-test.js should pass jshint.');\n  });\n});","define('allthemats/tests/integration/components/row-header-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('row-header', 'Integration | Component | row header', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '+Kw9dG0+',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"row-header\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '86AAzF//',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"row-header\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('allthemats/tests/integration/components/row-header-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/row-header-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/row-header-test.js should pass jshint.');\n  });\n});","define('allthemats/tests/integration/components/sign-in-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('sign-in-form', 'Integration | Component | sign in form', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'iWgfKNlK',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"sign-in-form\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '0kWL1c/7',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"sign-in-form\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('allthemats/tests/integration/components/sign-in-form-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/sign-in-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/sign-in-form-test.js should pass jshint.');\n  });\n});","define('allthemats/tests/resolver.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('allthemats/tests/router.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('allthemats/tests/routes/application.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('allthemats/tests/routes/sign-in.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | routes/sign-in.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/sign-in.js should pass jshint.\\nroutes/sign-in.js: line 1, col 26, Missing semicolon.\\nroutes/sign-in.js: line 2, col 24, Missing semicolon.\\nroutes/sign-in.js: line 9, col 36, Missing semicolon.\\nroutes/sign-in.js: line 19, col 58, Missing semicolon.\\nroutes/sign-in.js: line 20, col 9, Missing semicolon.\\nroutes/sign-in.js: line 23, col 3, Missing semicolon.\\n\\n6 errors');\n  });\n});","define('allthemats/tests/serializers/application.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass jshint.');\n  });\n});","define('allthemats/tests/services/ajax.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | services/ajax.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/ajax.js should pass jshint.\\nservices/ajax.js: line 1, col 26, Missing semicolon.\\nservices/ajax.js: line 2, col 51, Missing semicolon.\\nservices/ajax.js: line 3, col 48, Missing semicolon.\\nservices/ajax.js: line 11, col 23, Missing semicolon.\\nservices/ajax.js: line 12, col 55, Missing semicolon.\\nservices/ajax.js: line 14, col 55, Missing semicolon.\\nservices/ajax.js: line 17, col 21, Missing semicolon.\\nservices/ajax.js: line 20, col 3, Missing semicolon.\\n\\n8 errors');\n  });\n});","define('allthemats/tests/services/auth.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | services/auth.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/auth.js should pass jshint.\\nservices/auth.js: line 1, col 26, Missing semicolon.\\nservices/auth.js: line 2, col 49, Missing semicolon.\\nservices/auth.js: line 18, col 7, Missing semicolon.\\nservices/auth.js: line 31, col 56, Missing semicolon.\\nservices/auth.js: line 32, col 62, Missing semicolon.\\nservices/auth.js: line 33, col 62, Missing semicolon.\\nservices/auth.js: line 34, col 7, Missing semicolon.\\nservices/auth.js: line 45, col 7, Missing semicolon.\\nservices/auth.js: line 50, col 52, Missing semicolon.\\nservices/auth.js: line 52, col 3, Missing semicolon.\\n\\n10 errors');\n  });\n});","define('allthemats/tests/storages/auth.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | storages/auth.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'storages/auth.js should pass jshint.\\nstorages/auth.js: line 1, col 61, Missing semicolon.\\nstorages/auth.js: line 4, col 3, Missing semicolon.\\n\\n2 errors');\n  });\n});","define('allthemats/tests/test-helper', ['exports', 'allthemats/tests/helpers/resolver', 'allthemats/tests/helpers/flash-message', 'ember-qunit'], function (exports, _allthematsTestsHelpersResolver, _allthematsTestsHelpersFlashMessage, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_allthematsTestsHelpersResolver['default']);\n});","define('allthemats/tests/test-helper.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('allthemats/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('allthemats/tests/unit/adapters/application-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('allthemats/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('allthemats/tests/unit/routes/application-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('allthemats/tests/unit/routes/sign-in-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:sign-in', 'Unit | Route | sign in', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('allthemats/tests/unit/routes/sign-in-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/sign-in-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/sign-in-test.js should pass jshint.');\n  });\n});","define(\"allthemats/tests/unit/serializers/application-test\", [\"exports\"], function (exports) {});","define('allthemats/tests/unit/serializers/application-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/serializers/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass jshint.');\n  });\n});","define('allthemats/tests/unit/services/ajax-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:ajax', 'Unit | Service | ajax', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('allthemats/tests/unit/services/ajax-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/ajax-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/ajax-test.js should pass jshint.');\n  });\n});","define('allthemats/tests/unit/services/auth-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:auth', 'Unit | Service | auth', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('allthemats/tests/unit/services/auth-test.jshint.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/auth-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/auth-test.js should pass jshint.');\n  });\n});","require('allthemats/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;","file":"tests.js"}